diff --git a/sites/all/modules/contrib/shurly/shurly.module b/sites/all/modules/contrib/shurly/shurly.module
index f651b6d..4b7417a 100644
--- a/sites/all/modules/contrib/shurly/shurly.module
+++ b/sites/all/modules/contrib/shurly/shurly.module
@@ -22,9 +22,9 @@ function shurly_css_js($which = 'both') {
     drupal_add_css($path . '/shurly.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
   }
   if ($which == 'js' || $which == 'both') {
-    drupal_add_js($path . '/zeroclipboard/ZeroClipboard.js');
+//    drupal_add_js($path . '/zeroclipboard/ZeroClipboard.js');
     drupal_add_js($path . '/shurly.js');
-    drupal_add_js("ZeroClipboard.setMoviePath( '" . base_path() . $path . '/zeroclipboard/ZeroClipboard.swf' . "' );", 'inline');
+//    drupal_add_js("ZeroClipboard.setMoviePath( '" . base_path() . $path . '/zeroclipboard/ZeroClipboard.swf' . "' );", 'inline');
   }
 }
 
@@ -416,7 +416,7 @@ function shurly_create_form($form, &$form_state) {
     '#title' => t('Enter a long URL to make short'),
     '#type' => 'textfield',
     '#maxlength' => 2048,
-    '#default_value' => isset($form_state['storage']['shurly']['long_url']) ? $form_state['storage']['shurly']['long_url'] : ( isset($_GET['url']) ? $_GET['url'] : 'https://'),
+    '#default_value' => isset($form_state['storage']['shurly']['long_url']) ? $form_state['storage']['shurly']['long_url'] : ( isset($_GET['url']) ? $_GET['url'] : 'http://'),
     '#attributes' => array('tabindex' => 1),
   );
 
@@ -440,8 +440,8 @@ function shurly_create_form($form, &$form_state) {
       '#prefix' => '<div class="shurly-result">',
       '#suffix' => '</div>',
       '#field_prefix' => t('Your short URL:'),
-      '#field_suffix' => ' <div id="shurly-copy-container" style="position:relative;"><div id="shurly-copy">' . t('copy') . '</div></div>
-      <div class="social"><a href="https://twitter.com?status=' . urlencode($form_state['storage']['shurly']['final_url']) . '">' . t('Create a Twitter message with this URL') . '</a></div>',
+      '#field_suffix' => ' <div id="shurly-copy-container" style="position:relative;">' . t('') . '</div>
+      <div class="social"><a href="http://twitter.com?status=' . urlencode($form_state['storage']['shurly']['final_url']) . '">' . t('Create a Twitter message with this URL') . '</a></div>',
     );
   }
 
@@ -828,7 +828,7 @@ function shurly_validate_custom($custom) {
 
 /**
  * Validate a long URL
- *
+ * 
  * Checks for:
  * - a valid URL
  * - it's not a link to an existing short URL
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.as b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.as
deleted file mode 100755
index 26ad18b..0000000
--- a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.as
+++ /dev/null
@@ -1,81 +0,0 @@
-ï»¿package {
-	// Simple Set Clipboard System
-	// Author: Joseph Huckaby
-	
-	import flash.display.Stage;
-	import flash.display.Sprite;
-	import flash.display.LoaderInfo;
-	import flash.display.StageScaleMode;
-	import flash.events.*;
-	import flash.display.StageAlign;
-	import flash.display.StageScaleMode;
-	import flash.external.ExternalInterface;
-	import flash.system.Security;
-	import flash.utils.*;
-	import flash.system.System;
- 
-	public class ZeroClipboard extends Sprite {
-		
-		private var id:String = '';
-		private var button:Sprite;
-		private var clipText:String = '';
-		
-		public function ZeroClipboard() {
-			// constructor, setup event listeners and external interfaces
-			stage.scaleMode = StageScaleMode.EXACT_FIT;
-			flash.system.Security.allowDomain("*");
-			
-			// import flashvars
-			var flashvars:Object = LoaderInfo( this.root.loaderInfo ).parameters;
-			id = flashvars.id;
-			
-			// invisible button covers entire stage
-			button = new Sprite();
-			button.buttonMode = true;
-			button.useHandCursor = true;
-			button.graphics.beginFill(0xCCFF00);
-			button.graphics.drawRect(0, 0, Math.floor(flashvars.width), Math.floor(flashvars.height));
-			button.alpha = 0.0;
-			addChild(button);
-			button.addEventListener(MouseEvent.CLICK, clickHandler);
-			
-			button.addEventListener(MouseEvent.MOUSE_OVER, function(event:Event) {
-				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseOver', null );
-			} );
-			button.addEventListener(MouseEvent.MOUSE_OUT, function(event:Event) {
-				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseOut', null );
-			} );
-			button.addEventListener(MouseEvent.MOUSE_DOWN, function(event:Event) {
-				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseDown', null );
-			} );
-			button.addEventListener(MouseEvent.MOUSE_UP, function(event:Event) {
-				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseUp', null );
-			} );
-			
-			// external functions
-			ExternalInterface.addCallback("setHandCursor", setHandCursor);
-			ExternalInterface.addCallback("setText", setText);
-			
-			// signal to the browser that we are ready
-			ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'load', null );
-		}
-		
-		public function setText(newText) {
-			// set the maximum number of files allowed
-			clipText = newText;
-		}
-		
-		public function setHandCursor(enabled:Boolean) {
-			// control whether the hand cursor is shown on rollover (true)
-			// or the default arrow cursor (false)
-			button.useHandCursor = enabled;
-		}
-		
-		private function clickHandler(event:Event):void {
-			// user click copies text to clipboard
-			// as of flash player 10, this MUST happen from an in-movie flash click event
-			System.setClipboard( clipText );
-			ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'complete', clipText );
-		}
-	}
-}
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.fla b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.fla
deleted file mode 100755
index 007dc94..0000000
Binary files a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.fla and /dev/null differ
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.js b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.js
deleted file mode 100755
index 19976bb..0000000
--- a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.js
+++ /dev/null
@@ -1,312 +0,0 @@
-// Simple Set Clipboard System
-// Author: Joseph Huckaby
-
-var ZeroClipboard = {
-	
-	version: "1.0.7",
-	clients: {}, // registered upload clients on page, indexed by id
-	moviePath: 'ZeroClipboard.swf', // URL to movie
-	nextId: 1, // ID of next movie
-	
-	$: function(thingy) {
-		// simple DOM lookup utility function
-		if (typeof(thingy) == 'string') thingy = document.getElementById(thingy);
-		if (!thingy.addClass) {
-			// extend element with a few useful methods
-			thingy.hide = function() { this.style.display = 'none'; };
-			thingy.show = function() { this.style.display = ''; };
-			thingy.addClass = function(name) { this.removeClass(name); this.className += ' ' + name; };
-			thingy.removeClass = function(name) {
-				var classes = this.className.split(/\s+/);
-				var idx = -1;
-				for (var k = 0; k < classes.length; k++) {
-					if (classes[k] == name) { idx = k; k = classes.length; }
-				}
-				if (idx > -1) {
-					classes.splice( idx, 1 );
-					this.className = classes.join(' ');
-				}
-				return this;
-			};
-			thingy.hasClass = function(name) {
-				return !!this.className.match( new RegExp("\\s*" + name + "\\s*") );
-			};
-		}
-		return thingy;
-	},
-	
-	setMoviePath: function(path) {
-		// set path to ZeroClipboard.swf
-		this.moviePath = path;
-	},
-	
-	dispatch: function(id, eventName, args) {
-		// receive event from flash movie, send to client		
-		var client = this.clients[id];
-		if (client) {
-			client.receiveEvent(eventName, args);
-		}
-	},
-	
-	register: function(id, client) {
-		// register new client to receive events
-		this.clients[id] = client;
-	},
-	
-	getDOMObjectPosition: function(obj, stopObj) {
-		// get absolute coordinates for dom element
-		var info = {
-			left: 0, 
-			top: 0, 
-			width: obj.width ? obj.width : obj.offsetWidth, 
-			height: obj.height ? obj.height : obj.offsetHeight
-		};
-
-		// commented out.. requires relative parent around target element
-		//while (obj && (obj != stopObj)) {
-		//	info.left += obj.offsetLeft;
-		//	info.top += obj.offsetTop;
-		//	obj = obj.offsetParent;
-		//}
-
-		return info;
-	},
-	
-	Client: function(elem) {
-		// constructor for new simple upload client
-		this.handlers = {};
-		
-		// unique ID
-		this.id = ZeroClipboard.nextId++;
-		this.movieId = 'ZeroClipboardMovie_' + this.id;
-		
-		// register client with singleton to receive flash events
-		ZeroClipboard.register(this.id, this);
-		
-		// create movie
-		if (elem) this.glue(elem);
-	}
-};
-
-ZeroClipboard.Client.prototype = {
-	
-	id: 0, // unique ID for us
-	ready: false, // whether movie is ready to receive events or not
-	movie: null, // reference to movie object
-	clipText: '', // text to copy to clipboard
-	handCursorEnabled: true, // whether to show hand cursor, or default pointer cursor
-	cssEffects: true, // enable CSS mouse effects on dom container
-	handlers: null, // user event handlers
-	
-	glue: function(elem, appendElem, stylesToAdd) {
-		// glue to DOM element
-		// elem can be ID or actual DOM element object
-		this.domElement = ZeroClipboard.$(elem);
-		
-		// float just above object, or zIndex 99 if dom element isn't set
-		var zIndex = 99;
-		if (this.domElement.style.zIndex) {
-			zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;
-		}
-		
-		if (typeof(appendElem) == 'string') {
-			appendElem = ZeroClipboard.$(appendElem);
-		}
-		else if (typeof(appendElem) == 'undefined') {
-			appendElem = document.getElementsByTagName('body')[0];
-		}
-		
-		// find X/Y position of domElement
-		var box = ZeroClipboard.getDOMObjectPosition(this.domElement, appendElem);
-		
-		// create floating DIV above element
-		this.div = document.createElement('div');
-		var style = this.div.style;
-		style.position = 'absolute';
-		style.left = '' + box.left + 'px';
-		style.top = '' + box.top + 'px';
-		style.width = '' + box.width + 'px';
-		style.height = '' + box.height + 'px';
-		style.zIndex = zIndex;
-		
-		if (typeof(stylesToAdd) == 'object') {
-			for (addedStyle in stylesToAdd) {
-				style[addedStyle] = stylesToAdd[addedStyle];
-			}
-		}
-		
-		// style.backgroundColor = '#f00'; // debug
-		
-		appendElem.appendChild(this.div);
-		
-		this.div.innerHTML = this.getHTML( box.width, box.height );
-	},
-	
-	getHTML: function(width, height) {
-		// return HTML for movie
-		var html = '';
-		var flashvars = 'id=' + this.id + 
-			'&width=' + width + 
-			'&height=' + height;
-			
-		if (navigator.userAgent.match(/MSIE/)) {
-			// IE gets an OBJECT tag
-			var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';
-			html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+protocol+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="'+width+'" height="'+height+'" id="'+this.movieId+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+ZeroClipboard.moviePath+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="'+flashvars+'"/><param name="wmode" value="transparent"/></object>';
-		}
-		else {
-			// all other browsers get an EMBED tag
-			html += '<embed id="'+this.movieId+'" src="'+ZeroClipboard.moviePath+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="'+width+'" height="'+height+'" name="'+this.movieId+'" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="'+flashvars+'" wmode="transparent" />';
-		}
-		return html;
-	},
-	
-	hide: function() {
-		// temporarily hide floater offscreen
-		if (this.div) {
-			this.div.style.left = '-2000px';
-		}
-	},
-	
-	show: function() {
-		// show ourselves after a call to hide()
-		this.reposition();
-	},
-	
-	destroy: function() {
-		// destroy control and floater
-		if (this.domElement && this.div) {
-			this.hide();
-			this.div.innerHTML = '';
-			
-			var body = document.getElementsByTagName('body')[0];
-			try { body.removeChild( this.div ); } catch(e) {;}
-			
-			this.domElement = null;
-			this.div = null;
-		}
-	},
-	
-	reposition: function(elem) {
-		// reposition our floating div, optionally to new container
-		// warning: container CANNOT change size, only position
-		if (elem) {
-			this.domElement = ZeroClipboard.$(elem);
-			if (!this.domElement) this.hide();
-		}
-		
-		if (this.domElement && this.div) {
-			var box = ZeroClipboard.getDOMObjectPosition(this.domElement);
-			var style = this.div.style;
-			style.left = '' + box.left + 'px';
-			style.top = '' + box.top + 'px';
-		}
-	},
-	
-	setText: function(newText) {
-		// set text to be copied to clipboard
-		this.clipText = newText;
-		if (this.ready) this.movie.setText(newText);
-	},
-	
-	addEventListener: function(eventName, func) {
-		// add user event listener for event
-		// event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel
-		eventName = eventName.toString().toLowerCase().replace(/^on/, '');
-		if (!this.handlers[eventName]) this.handlers[eventName] = [];
-		this.handlers[eventName].push(func);
-	},
-	
-	setHandCursor: function(enabled) {
-		// enable hand cursor (true), or default arrow cursor (false)
-		this.handCursorEnabled = enabled;
-		if (this.ready) this.movie.setHandCursor(enabled);
-	},
-	
-	setCSSEffects: function(enabled) {
-		// enable or disable CSS effects on DOM container
-		this.cssEffects = !!enabled;
-	},
-	
-	receiveEvent: function(eventName, args) {
-		// receive event from flash
-		eventName = eventName.toString().toLowerCase().replace(/^on/, '');
-				
-		// special behavior for certain events
-		switch (eventName) {
-			case 'load':
-				// movie claims it is ready, but in IE this isn't always the case...
-				// bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function
-				this.movie = document.getElementById(this.movieId);
-				if (!this.movie) {
-					var self = this;
-					setTimeout( function() { self.receiveEvent('load', null); }, 1 );
-					return;
-				}
-				
-				// firefox on pc needs a "kick" in order to set these in certain cases
-				if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {
-					var self = this;
-					setTimeout( function() { self.receiveEvent('load', null); }, 100 );
-					this.ready = true;
-					return;
-				}
-				
-				this.ready = true;
-				this.movie.setText( this.clipText );
-				this.movie.setHandCursor( this.handCursorEnabled );
-				break;
-			
-			case 'mouseover':
-				if (this.domElement && this.cssEffects) {
-					this.domElement.addClass('hover');
-					if (this.recoverActive) this.domElement.addClass('active');
-				}
-				break;
-			
-			case 'mouseout':
-				if (this.domElement && this.cssEffects) {
-					this.recoverActive = false;
-					if (this.domElement.hasClass('active')) {
-						this.domElement.removeClass('active');
-						this.recoverActive = true;
-					}
-					this.domElement.removeClass('hover');
-				}
-				break;
-			
-			case 'mousedown':
-				if (this.domElement && this.cssEffects) {
-					this.domElement.addClass('active');
-				}
-				break;
-			
-			case 'mouseup':
-				if (this.domElement && this.cssEffects) {
-					this.domElement.removeClass('active');
-					this.recoverActive = false;
-				}
-				break;
-		} // switch eventName
-		
-		if (this.handlers[eventName]) {
-			for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {
-				var func = this.handlers[eventName][idx];
-			
-				if (typeof(func) == 'function') {
-					// actual function reference
-					func(this, args);
-				}
-				else if ((typeof(func) == 'object') && (func.length == 2)) {
-					// PHP style object + method, i.e. [myObject, 'myMethod']
-					func[0][ func[1] ](this, args);
-				}
-				else if (typeof(func) == 'string') {
-					// name of function
-					window[func](this, args);
-				}
-			} // foreach event handler defined
-		} // user defined handler for event
-	}
-	
-};
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.swf b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.swf
deleted file mode 100755
index 13bf8e3..0000000
Binary files a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard.swf and /dev/null differ
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.as b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.as
deleted file mode 100644
index 7b07a6a..0000000
--- a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.as
+++ /dev/null
@@ -1 +0,0 @@
-ï»¿package {	// Simple Set Clipboard System	// Author: Joseph Huckaby		import flash.display.Stage;	import flash.display.Sprite;	import flash.desktop.Clipboard;	import flash.desktop.ClipboardFormats;	import flash.desktop.ClipboardTransferMode;	import flash.display.LoaderInfo;	import flash.display.StageScaleMode;	import flash.events.*;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.external.ExternalInterface;	import flash.system.Security;	import flash.utils.*;	import flash.system.System; 	public class ZeroClipboard10 extends Sprite {				private var id:String = '';		private var button:Sprite;		private var clipText:String = '';				public function ZeroClipboard10() {			// constructor, setup event listeners and external interfaces			stage.scaleMode = StageScaleMode.EXACT_FIT;			flash.system.Security.allowDomain("*");						// import flashvars			var flashvars:Object = LoaderInfo( this.root.loaderInfo ).parameters;			id = flashvars.id;						// invisible button covers entire stage			button = new Sprite();			button.buttonMode = true;			button.useHandCursor = true;			button.graphics.beginFill(0xCCFF00);			button.graphics.drawRect(0, 0, Math.floor(flashvars.width), Math.floor(flashvars.height));			button.alpha = 0.0;			addChild(button);			button.addEventListener(MouseEvent.CLICK, clickHandler);						button.addEventListener(MouseEvent.MOUSE_OVER, function(event:Event) {				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseOver', null );			} );			button.addEventListener(MouseEvent.MOUSE_OUT, function(event:Event) {				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseOut', null );			} );			button.addEventListener(MouseEvent.MOUSE_DOWN, function(event:Event) {				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseDown', null );			} );			button.addEventListener(MouseEvent.MOUSE_UP, function(event:Event) {				ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'mouseUp', null );			} );						// external functions			ExternalInterface.addCallback("setHandCursor", setHandCursor);			ExternalInterface.addCallback("setText", setText);						// signal to the browser that we are ready			ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'load', null );		}				public function setText(newText) {			// set the maximum number of files allowed			clipText = newText;		}				public function setHandCursor(enabled:Boolean) {			// control whether the hand cursor is shown on rollover (true)			// or the default arrow cursor (false)			button.useHandCursor = enabled;		}				private function clickHandler(event:Event):void {			// user click copies text to clipboard			// as of flash player 10, this MUST happen from an in-movie flash click event			Clipboard.generalClipboard.clear();			Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, clipText); 			Clipboard.generalClipboard.setData(ClipboardFormats.HTML_FORMAT, clipText);			ExternalInterface.call( 'ZeroClipboard.dispatch', id, 'complete', clipText );		}	}}
\ No newline at end of file
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.fla b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.fla
deleted file mode 100755
index b98b5b9..0000000
Binary files a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.fla and /dev/null differ
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.swf b/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.swf
deleted file mode 100644
index bfed97f..0000000
Binary files a/sites/all/modules/contrib/shurly/zeroclipboard/ZeroClipboard10.swf and /dev/null differ
diff --git a/sites/all/modules/contrib/shurly/zeroclipboard/test.html b/sites/all/modules/contrib/shurly/zeroclipboard/test.html
deleted file mode 100755
index a6da39e..0000000
--- a/sites/all/modules/contrib/shurly/zeroclipboard/test.html
+++ /dev/null
@@ -1,76 +0,0 @@
-<html>
-<head>
-	<title>Zero Clipboard Test</title>
-	<style type="text/css">
-		body { font-family:arial,sans-serif; font-size:9pt; }
-		
-		.my_clip_button { width:150px; text-align:center; border:1px solid black; background-color:#ccc; margin:10px; padding:10px; cursor:default; font-size:9pt; }
-		.my_clip_button.hover { background-color:#eee; }
-		.my_clip_button.active { background-color:#aaa; }
-	</style>
-	<script type="text/javascript" src="ZeroClipboard.js"></script>
-	<script language="JavaScript">
-		var clip = null;
-		
-		function $(id) { return document.getElementById(id); }
-		
-		function init() {
-			clip = new ZeroClipboard.Client();
-			clip.setHandCursor( true );
-			
-			clip.addEventListener('load', function (client) {
-				debugstr("Flash movie loaded and ready.");
-			});
-			
-			clip.addEventListener('mouseOver', function (client) {
-				// update the text on mouse over
-				clip.setText( $('fe_text').value );
-			});
-			
-			clip.addEventListener('complete', function (client, text) {
-				debugstr("Copied text to clipboard: " + text );
-			});
-			
-			clip.glue( 'd_clip_button', 'd_clip_container' );
-		}
-		
-		function debugstr(msg) {
-			var p = document.createElement('p');
-			p.innerHTML = msg;
-			$('d_debug').appendChild(p);
-		}
-	</script>
-</head>
-<body onLoad="init()">
-	<h1>Zero Clipboard Test</h1>
-	<p><script>document.write("Your browser: " + navigator.userAgent);</script></p>
-	<table width="100%">
-		<tr>
-			<td width="50%" valign="top">
-				<!-- Upload Form -->
-				<table>
-					<tr>
-						<td align="right"><b>Text:</b></td>
-						<td align="left"><textarea id="fe_text" cols=50 rows=5 onChange="clip.setText(this.value)">Copy me!</textarea></td>
-					</tr>
-				</table>
-				<br/>
-				<div id="d_clip_container" style="position:relative">
-					<div id="d_clip_button" class="my_clip_button"><b>Copy To Clipboard...</b></div>
-				</div>
-			</td>
-			<td width="50%" valign="top">
-				<!-- Debug Console -->
-				<div id="d_debug" style="border:1px solid #aaa; padding: 10px; font-size:9pt;">
-					<h3>Debug Console:</h3>
-				</div>
-			</td>
-		</tr>
-	</table>
-	
-	<br/><br/>
-	You can paste text here if you want, to make sure it worked:<br/>
-	<textarea id="testarea" cols=50 rows=10></textarea><br/>
-	<input type=button value="Clear Test Area" onClick="$('testarea').value = '';"/>
-</body>
-</html>
